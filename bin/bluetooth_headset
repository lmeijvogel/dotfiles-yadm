#!/usr/bin/env ruby

class NotConnected < StandardError ; end

HEADSET = "handsfree_head_unit"
HIFI = "a2dp_sink"

class BluetoothDevice
  def initialize(name)
    @name = name
  end

  def show
    click_action = "#{$0} --toggle"
    puts "%{A1:#{click_action}:}ïŠ“ #{profile_description}%{A}"
  rescue NotConnected => e
    puts ""
  end

  def toggle
    new_profile = profile_id == HEADSET ? HIFI : HEADSET

    system("pacmd", "set-card-profile", pa_device_index, new_profile)
  rescue NotConnected => e
    puts ""
  rescue StandardError => e
    puts "Error! #{e.message}"
    exit 1
  end

  def profile_id
    @profile_id ||= begin
                   regex_pattern = /^active profile: <([^>]*)>/

                   entry = device_entry.grep(regex_pattern)[0]

                   return nil if entry.nil?

                   entry.match(regex_pattern)[1]
                 end
  end

  def pa_device_index
    @pa_device_index ||= begin
                        index_matches = device_entry[0].match(/index: (\d+)/)

                        index_matches[1]
                      end
  end

  private def device_entry
    @device_entry ||= begin
                        output = `pacmd list-cards`

                        entries = output.each_line.map(&:strip).slice_before(/\A\s*index:/)

                        result = entries.find do |entry|
                          entry.any? { |line| line =~ /device.description = "#{@name}"/ }
                        end

                        raise NotConnected unless result

                        result
                      end
  end

  def profile_description
    {
      HEADSET => "Headset",
      HIFI => "HiFi Playback"
    }[profile_id]
  end

end

action = ARGV.fetch(0)

device = BluetoothDevice.new("Sudio Tre")

case action
when "--toggle"
  device.toggle
when "--show"
  device.show
else
  puts "Invalid arguement #{action}"
end
